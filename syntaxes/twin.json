{
  "name": "twin",
  "scopeName": "source.twin",
  "patterns": [{ "include": "#line-comment" }, { "include": "#block-comment" }, { "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#arbitrary-variant-or-property" },
        { "include": "#variant" },
        { "include": "#short-css" },
        { "include": "#arbitrary-classname" },
        { "include": "#arbitrary-opacity" },
        { "include": "#group" },
        { "include": "#classname" },
        { "include": "#illegal" }
      ]
    },
    "line-comment": {
      "match": "(//).*",
      "captures": {
        "0": { "name": "comment.line.double-slash.twin" },
        "1": { "name": "punctuation.definition.comment.twin" }
      }
    },
    "block-comment": {
      "begin": "(/\\*)",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.comment.begin.twin" }
      },
      "end": "(\\*/)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.comment.end.twin" }
      },
      "contentName": "comment.block.twin"
    },
    "variant": {
      "match": "[\\w-]+:",
      "captures": {
        "0": { "name": "entity.other.inherited-class.variant.twin" }
      }
    },
    "arbitrary-variant-or-property": {
      "begin": "(?<!/)(!?)\\[",
      "end": "(?<=\\]:)|(?<=\\])(!?)(?<!:)",
      "beginCaptures": {
        "1": { "name": "support.function.important-bang.before.twin" }
      },
      "endCaptures": {
        "1": { "name": "support.function.important-bang.after.twin" }
      },
      "patterns": [
        {
          "end": "\\]:",
          "patterns": [{ "include": "source.css.scss.tw" }]
        },
        {
          "end": "\\]!?(?<!:)",
          "patterns": [
            {
              "begin": "(?<![-a-z])(?=[-a-z])",
              "end": "$|(?![-a-z])",
              "patterns": [{ "include": "source.css#property-names" }]
            },
            {
              "begin": "(:)\\s*(?!(\\s*{))",
              "beginCaptures": {
                "1": { "name": "punctuation.separator.key-value.scss" }
              },
              "end": "\\s*(?=}|\\)|\\])",
              "patterns": [{ "include": "#track-list" }, { "include": "source.css.scss.tw#property_values" }]
            }
          ]
        }
      ]
    },
    "classname": {
      "match": "(!?)(?:(?!\\/\\/|\\/\\*)[a-zA-Z\\-])+[\\w\\-\\./]+(!?)(?<!/)",
      "captures": {
        "0": { "name": "support.constant.classname.twin" },
        "1": { "name": "support.function.important-bang.before.twin" },
        "2": { "name": "support.function.important-bang.after.twin" }
      }
    },
    "arbitrary-classname": {
      "name": "entity.name.variable.css-value.twin",
      "begin": "(!?)((?:(?:(?!\\/\\/)[\\w\\/])+-)+)(\\[)",
      "end": "(\\])(\\/(?:\\d+|\\[\\s*\\d*\\.?\\d*\\s*\\]))?(!?)",
      "beginCaptures": {
        "1": { "name": "support.function.important-bang.before.twin" },
        "2": { "name": "support.type.arbitrary-style.prop.twin" }
      },
      "endCaptures": {
        "3": { "name": "support.function.important-bang.after.twin" }
      },
      "patterns": [
        {
          "end": "\\]!?",
          "patterns": [{ "include": "#track-list" }, { "include": "source.css.scss.tw#property_values" }]
        }
      ]
    },
    "arbitrary-opacity": {
      "contentName": "support.type.arbitrary-style.endOpacity.twin",
      "begin": "(!?)((?:(?:(?!\\/\\/)[\\w\\/])+-)*(?:(?!\\/\\/)[\\w\\/])+)(/\\[)",
      "end": "(\\])(!?)",
      "beginCaptures": {
        "1": { "name": "support.function.important-bang.before.twin" },
        "2": { "name": "support.type.arbitrary-style.prop.twin" }
      },
      "endCaptures": {
        "2": { "name": "support.function.important-bang.after.twin" }
      }
    },
    "short-css": {
      "contentName": "entity.name.variable.css-value.twin",
      "begin": "(!?)((?:-{1,2})?(?:\\w+-)*\\w+)(\\[)",
      "end": "(\\])(!?)",
      "beginCaptures": {
        "1": { "name": "support.function.important-bang.short-css.twin" },
        "2": { "name": "support.type.short-css.prop.twin" }
      },
      "endCaptures": {
        "2": { "name": "support.function.important-bang.short-css.twin" }
      },
      "patterns": [{ "include": "#track-list" }, { "include": "source.css.scss.tw#properties" }]
    },
    "group": {
      "begin": "(!?)\\(",
      "end": "\\)(!?)",
      "name": "meta.block.variant-group.twin",
      "beginCaptures": {
        "1": { "name": "support.function.important-bang.before.twin" }
      },
      "endCaptures": {
        "1": { "name": "support.function.important-bang.after.twin" }
      },
      "patterns": [{ "include": "$self" }, { "include": "#expression" }]
    },
    "track-list": {
      "contentName": "string.property-value.css",
      "begin": "\\[",
      "end": "\\]",
      "patterns": [{ "include": "#track-list" }]
    },
    "illegal": {
      "name": "invalid.value.twin",
      "match": "(\\S+?)(?!(?://|\"|'|`))"
    }
  }
}
