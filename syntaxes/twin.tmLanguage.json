{
  "name": "twin",
  "scopeName": "source.twin",
  "patterns": [
    {
      "include": "#line-comment-end-backtick"
    },
    {
      "include": "#block-comment-end-backtick"
    },
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "expression": {
      "patterns": [
        {
          "include": "#expression-arbitrary-variant"
        },
        {
          "include": "#expression-variant"
        },
        {
          "include": "#expression-short-css"
        },
        {
          "include": "#expression-arbitrary"
        },
        {
          "include": "#expression-arbitrary-opacity"
        },
        {
          "include": "#expression-variant-group"
        },
        {
          "include": "#expression-classname"
        },
        {
          "include": "#illegal"
        }
      ]
    },
    "line-comment-end-backtick": {
      "match": "(//)[^`]*",
      "captures": {
        "0": {
          "name": "comment.line.double-slash.twin"
        },
        "1": {
          "name": "punctuation.definition.comment.twin"
        }
      }
    },
    "block-comment-end-backtick": {
      "begin": "(/\\*)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.begin.twin"
        }
      },
      "end": "(\\*/)|`",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.comment.end.twin"
        }
      },
      "contentName": "comment.block.twin"
    },
    "expression-variant": {
      "match": "[\\w-]+:",
      "captures": {
        "0": {
          "name": "entity.other.inherited-class.variant.twin"
        }
      }
    },
    "expression-arbitrary-variant": {
      "begin": "(?<!/)(\\[)",
      "end": "(\\]:)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.embedded.arbitrary-variant.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.embedded.arbitrary-variant.end.twin"
        }
      },
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "source.css.scss.tw"
        }
      ]
    },
    "expression-classname": {
      "match": "(!?)(?:(?!\\/\\/|\\/\\*)[a-zA-Z\\-])+[\\w\\-\\./]+(!?)",
      "captures": {
        "0": {
          "name": "support.constant.classname.twin"
        },
        "1": {
          "name": "support.function.important-bang.before.classname.twin"
        },
        "2": {
          "name": "support.function.important-bang.after.classname.twin"
        }
      }
    },
    "expression-arbitrary": {
      "name": "entity.name.variable.css-value.twin",
      "begin": "(!?)((?:(?:(?!\\/\\/)[\\w\\/])+-)+)(\\[)",
      "end": "(\\])(\\/(?:\\d+|\\[\\s*\\d*\\.?\\d*\\s*\\]))?(!?)",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.before.arbitrary-style.twin"
        },
        "2": {
          "name": "support.type.arbitrary-style.prop.twin"
        },
        "3": {
          "name": "punctuation.section.embedded.arbitrary-style.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.embedded.arbitrary-style.end.twin"
        },
        "2": {
          "name": "support.type.arbitrary-style.endOpacity.twin"
        },
        "3": {
          "name": "support.function.important-bang.after.arbitrary-style.twin"
        }
      },
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "#css-value-content-bracket"
        },
        {
          "include": "source.css.scss.tw#property_values"
        }
      ]
    },
    "expression-arbitrary-opacity": {
      "contentName": "support.type.arbitrary-style.endOpacity.twin",
      "begin": "(!?)((?:(?:(?!\\/\\/)[\\w\\/])+-)*(?:(?!\\/\\/)[\\w\\/])+)(/\\[)",
      "end": "(\\])(!?)",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.before.arbitrary-style.twin"
        },
        "2": {
          "name": "support.type.arbitrary-style.prop.twin"
        },
        "3": {
          "name": "support.type.arbitrary-style.endOpacity.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "support.type.arbitrary-style.endOpacity.twin"
        },
        "2": {
          "name": "support.function.important-bang.after.arbitrary-style.twin"
        }
      }
    },
    "expression-short-css": {
      "contentName": "entity.name.variable.css-value.twin",
      "begin": "(!?)((?:-{1,2})?(?:\\w+-)*\\w+)(\\[)",
      "end": "(\\])(!?)",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.short-css.twin"
        },
        "2": {
          "name": "support.type.short-css.prop.twin"
        },
        "3": {
          "name": "punctuation.section.embedded.short-css.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.embedded.short-css.end.twin"
        },
        "2": {
          "name": "support.function.important-bang.short-css.twin"
        }
      },
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "#css-value-content-bracket"
        },
        {
          "include": "source.css.scss#property_values"
        }
      ]
    },
    "expression-variant-group": {
      "begin": "(!?)(\\()",
      "end": "(\\))(!?)",
      "name": "meta.block.variant-group.twin",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.before.variant-group.twin"
        },
        "2": {
          "name": "punctuation.definition.bracket.variant-group.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.bracket.variant-group.end.twin"
        },
        "2": {
          "name": "support.function.important-bang.after.variant-group.twin"
        }
      },
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "css-value-content-bracket": {
      "contentName": "string.twin",
      "begin": "(\\[)",
      "end": "(\\])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.begin.bracket.square.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.end.bracket.square.twin"
        }
      },
      "patterns": [
        {
          "include": "#css-value-content-bracket"
        }
      ]
    },
    "illegal": {
      "name": "invalid.value.twin",
      "match": "(\\S+?)(?!(?://|\"|'|`))"
    }
  }
}
