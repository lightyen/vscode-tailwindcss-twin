{
  "name": "source.twin",
  "scopeName": "source.twin",
  "injectionSelector": "L:source -comment",
  "patterns": [
    {
      "name": "meta.tag.twin",
      "begin": "(tw)(?:(?:\\.(\\w+))?|\\(\\w*\\))(`)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.twin"
        },
        "2": {
          "name": "entity.name.function.tagged-template.twin"
        },
        "3": {
          "name": "punctuation.definition.string.template.begin.twin"
        }
      },
      "end": "(`)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.template.end.twin"
        }
      },
      "patterns": [{ "include": "#expression-backtick" }]
    }
  ],
  "repository": {
    "qstring-double": {
      "name": "string.quoted.double.twin",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.twin"
        }
      },
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.twin"
        }
      }
    },
    "qstring-single": {
      "name": "string.quoted.single.twin",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.twin"
        }
      },
      "end": "(')",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.twin"
        }
      }
    },
    "line-comment-end-backtick": {
      "match": "(//)[^`]*",
      "captures": {
        "0": {
          "name": "comment.line.double-slash.twin"
        },
        "1": {
          "name": "punctuation.definition.comment.twin"
        }
      }
    },
    "block-comment-end-backtick": {
      "begin": "(/\\*)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.comment.begin.twin"
        }
      },
      "end": "(\\*/)|(`)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.comment.end.twin"
        },
        "2": {
          "name": "punctuation.definition.string.template.end.twin"
        }
      },
      "contentName": "comment.block.twin"
    },
    "expression-variant": {
      "match": "([\\w-]+:)",
      "captures": {
        "0": {
          "name": "entity.other.inherited-class.variant.twin"
        }
      }
    },
    "expression-arbitrary-variant": {
      "begin": "(\\[)",
      "end": "(\\]):",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.embedded.arbitrary-variant.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.embedded.arbitrary-variant.end.twin"
        }
      },
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "source.css.scss.tw"
        }
      ]
    },
    "expression-classname": {
      "match": "(!?)((?:(?!\\/\\/|\\/\\*)[\\w\\-\\./])+)(!?)",
      "captures": {
        "1": {
          "name": "support.function.important-bang.classname.twin"
        },
        "2": {
          "name": "support.constant.classname.twin"
        },
        "3": {
          "name": "support.function.important-bang.classname.twin"
        }
      }
    },
    "expression-short-css": {
      "contentName": "entity.name.variable.css-value.twin",
      "begin": "(!?)((?:-{1,2})?(?:\\w+-)*\\w+)(\\[)",
      "end": "(\\])(!?)",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.short-css.twin"
        },
        "2": {
          "name": "support.type.short-css.prop.twin"
        },
        "3": {
          "name": "punctuation.section.embedded.short-css.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.embedded.short-css.end.twin"
        },
        "2": {
          "name": "support.function.important-bang.short-css.twin"
        }
      },
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "#css-value-content-bracket"
        },
        {
          "include": "source.css#property-values"
        }
      ]
    },
    "css-value-content-bracket": {
      "contentName": "string.twin",
      "begin": "(\\[)",
      "end": "(\\])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.begin.bracket.square.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.end.bracket.square.twin"
        }
      },
      "patterns": [
        {
          "include": "#css-value-content-bracket"
        }
      ]
    },
    "expression-arbitrary-style": {
      "name": "entity.name.variable.css-value.twin",
      "begin": "(!?)((?:(?:(?!\\/\\/)[\\w\\/])+-)+)(\\[)",
      "end": "(\\])(\\/(?:\\d+|\\[\\s*\\d*\\.?\\d*\\s*\\]))?(!?)",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.arbitrary-style.twin"
        },
        "2": {
          "name": "support.type.arbitrary-style.prop.twin"
        },
        "3": {
          "name": "punctuation.section.embedded.arbitrary-style.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.section.embedded.arbitrary-style.end.twin"
        },
        "2": {
          "name": "support.type.arbitrary-style.endOpacity.twin"
        },
        "3": {
          "name": "support.function.important-bang.arbitrary-style.twin"
        }
      },
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "#css-value-content-bracket"
        },
        {
          "include": "source.css#property-values"
        }
      ]
    },
    "expression-arbitrary-opacity": {
      "contentName": "support.type.arbitrary-style.endOpacity.twin",
      "begin": "(!?)((?:(?:(?!\\/\\/)[\\w\\/])+-)*(?:(?!\\/\\/)[\\w\\/])+)(/\\[)",
      "end": "(\\])(!?)",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.arbitrary-style.twin"
        },
        "2": {
          "name": "support.type.arbitrary-style.prop.twin"
        },
        "3": {
          "name": "support.type.arbitrary-style.endOpacity.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "support.type.arbitrary-style.endOpacity.twin"
        },
        "2": {
          "name": "support.function.important-bang.arbitrary-style.twin"
        }
      }
    },
    "variant-group-expression": {
      "begin": "(!?)(\\()",
      "end": "(\\))(!?)",
      "name": "meta.block.variant-group.twin",
      "beginCaptures": {
        "1": {
          "name": "support.function.important-bang.variant-group.twin"
        },
        "2": {
          "name": "punctuation.definition.bracket.variant-group.begin.twin"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.bracket.variant-group.end.twin"
        },
        "2": {
          "name": "support.function.important-bang.variant-group.twin"
        }
      },
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#expression-backtick"
        }
      ]
    },
    "illegal": {
      "name": "invalid.illegal.twin",
      "match": "(\\S+?)(?!(?://|\"|'|`))"
    },
    "expression-backtick": {
      "patterns": [
        {
          "include": "#line-comment-end-backtick"
        },
        {
          "include": "#block-comment-end-backtick"
        },
        {
          "include": "#expression-arbitrary-variant"
        },
        {
          "include": "#expression-variant"
        },
        {
          "include": "#expression-short-css"
        },
        {
          "include": "#expression-arbitrary-style"
        },
        {
          "include": "#expression-arbitrary-opacity"
        },
        {
          "include": "#expression-classname"
        },
        {
          "include": "#variant-group-expression"
        }
      ]
    }
  }
}
